/*
Given a list of integers, write a programme that returns the largest sum of non-adjacent numbers. Numbers can be 0 or negative. In other words, out of all subsets, which do not contain adjacent numbers of a given array (excluding the empty subset), find the maximum subset sum.
For example, [2, 4, 6, 2, 5] should return 13, since we pick 2, 6, and 5. [5, 1, 1, 5] should return 10, since we pick 5 and 5.
*/

#include<bits/stdc++.h>
using namespace std;
int main() {
	int n;
    cin >> n;
    int arr[n];
    for(int i=0; i<n; i++)
        cin >> arr[i];
	int dp[n+1] = {};
    if(n == 1) {
        cout << arr[0] << endl;
        return 0;
    }
    if(n == 2) {
        cout << max(arr[0], arr[1]) << endl;
        return 0;
    }
    dp[0] = arr[0];
    dp[1] = max(arr[0], arr[1]);
    for(int i=2; i<n; i++)
        dp[i] = max(dp[i-1], arr[i]+dp[i-2]);
    cout << dp[n-1] << endl;
    return 0;
}
