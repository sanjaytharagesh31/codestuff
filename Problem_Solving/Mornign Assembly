/*
In a local school, N students have assembled for the morning assembly. All the students are standing in a straight line. Due to some technical issues, the mike is not working. The technician is trying to solve the issue. Students have to stand in the line, all this while. After a while, students start looking at each other. But, since they are not standing in any particular order of heights, not one cannot see everyone else.
Two students X and Y can see each other if they are standing next to each other or if no student standing between them has height greater than height of either X or Y.
You will be given height of students standing in the assembly line. You have to print the number of pairs of students that can see each other.
*/

#include<bits/stdc++.h>
using namespace std;
typedef long long int ll;

/*
2 4 1 2 2 5 1
     .
 .   . 
 .   .
.. ...
.......

*/

int main() {
	ll n;
    cin >> n;
    vector<ll> h(n);
    for(int i=0; i<n; i++)
    	cin >> h[i];
	ll ans = 0;
    stack<pair<ll, ll>> s;
    for(int i=0; i<n; i++) {
        pair<ll, ll> tmp = make_pair(h[i], 1);
        while(!s.empty() && (s.top().first <= h[i])) {
            ans += s.top().second;
            if(s.top().first == h[i])
                tmp.second += s.top().second;
            s.pop();
        }   
        if(!s.empty())
            ans++;
        s.push(tmp);
    }
    cout << ans << endl;
}





