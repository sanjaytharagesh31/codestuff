/*
Let A[0 ... n-1] be an array of n distinct positive integers. If i < j and A[i] > A[j] then the pair (i, j) is called an inversion of A (where i and j are indexes of A). Given an integer array A, your task is to find the number of inversions in A.
*/


long long merge(int arr[], int i, int m, int j) {
    int arr1[j-i+1];
    int p = i;
    int q = m+1;
    int ind = 0;
    long long inv = 0;
    while(p <= m && q <= j) {
        if(arr[p] <= arr[q])
            arr1[ind++] = arr[p++];
        else {
            inv += m - p + 1;
            arr1[ind++] = arr[q++];
        }
    }
    while(p <= m)
        arr1[ind++] = arr[p++];
    while(q <= j)
        arr1[ind++] = arr[q++];
    ind = 0;
    for(int p=i; p<=j; p++)
        arr[p] = arr1[ind++];
    return inv;
}

long long mergeSort(int arr[], int i, int j) {
    long long ans = 0;
    if(i < j) {
        int m = (i+j) / 2;
        ans += mergeSort(arr, i, m);
        ans += mergeSort(arr, m+1, j);
        ans += merge(arr, i, m, j);
        return ans;
    }
    else {
        return 0;
    }
}

long long solve(int A[], int n) {
	// Write your code here.
    return mergeSort(A, 0, n-1);
}
