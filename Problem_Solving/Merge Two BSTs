/*
Given two binary search trees ,merge the two given balanced BSTs into a balanced binary search tree.
Note: You just have to return the root of the balanced BST.

Give solution of O(m+n) time complexity.
*/


/* Structure of BinaryTreeNode class is:
template <typename T>
class BinaryTreeNode {
    public : 
    T data;
    BinaryTreeNode<T> *left;
    BinaryTreeNode<T> *right;

    BinaryTreeNode(T data) {
        this -> data = data;
        left = NULL;
        right = NULL;
    }
    ~BinaryTreeNode() {
      if(left) 
          delete left;
      if(right) 
          delete right;
    }
};*/

void inOrder(BinaryTreeNode<int>* root, vector<int> &v) {
    if(root == NULL)
        return;
    inOrder(root->left, v);
    v.push_back(root->data);
    inOrder(root->right, v);
}

vector<int> mergeInOrder(vector<int> &v1, vector<int> &v2) {
    int i = 0;
    int j = 0;
    int ind = 0;
    vector<int> ans(v1.size()+v2.size());
    while(i < v1.size() && j < v2.size()) {
        if(v1[i] < v2[j])
            ans[ind++] = v1[i++];
        else
            ans[ind++] = v2[j++];
    }
    while(i < v1.size())
        ans[ind++] = v1[i++];
    while(j < v2.size())
        ans[ind++] = v2[j++];
    return ans;
}

BinaryTreeNode<int>* mergeArr(vector<int> &arr, int i, int j) {
    if(i > j) {
        return NULL;
    }
    else if(i == j) {
        BinaryTreeNode<int>* root = new BinaryTreeNode<int>(arr[i]);
        return root;
    }
    else {
        int m = (i+j)/2;
        BinaryTreeNode<int>* root = new BinaryTreeNode<int>(arr[m]);
        root->left = mergeArr(arr, i, m-1);
        root->right = mergeArr(arr, m+1, j);
        return root;
    }
}

BinaryTreeNode<int>* printMergeTrees( BinaryTreeNode<int>* root1, BinaryTreeNode<int>* root2) {
    //Write your code here. You just have to return the root of the merged trees, printing is handled automatically.
    vector<int> v1, v2, arr;
    inOrder(root1, v1);
    inOrder(root2, v2);
    arr = mergeInOrder(v1, v2);
    return mergeArr(arr, 0, arr.size()-1);

}
