/*
Return the number of permutations of 1 to n so that prime numbers are at prime indices (1-indexed.)
(Recall that an integer is prime if and only if it is greater than 1, and cannot be written as a product of two positive integers both smaller than it.)
Since the answer may be large, return the answer modulo 10^9 + 7.
*/

#include <bits/stdc++.h>
using namespace std;

void p(int n, int *v) {
    v[1] = 0;
    for(int i=2; i<=n; i++) {
        if(v[i] == 1) {
            for(int j=2*i; j<=n; j=j+i)
                v[j] = 0;
        }
    }
}

long long int fact(int n) {
    long long int ans = 1;
    for(int i=1; i<=n; i++){
        ans = ((ans%1000000007)*(i%1000000007))%1000000007;
        // cout << ans << endl;
    }
    return (ans%1000000007);
}

int numPrimeArrangements(int n) {
    int v[n+10];
    for(int i=0; i<=n; i++)
        v[i] = 1;
    p(n, v);
    int cnt = 0;
	for(int i=1; i<=n; i++) {
        if(v[i] == 1)
            cnt++;
    }
    return ( fact(cnt) * fact(n-cnt) )%1000000007;

}
